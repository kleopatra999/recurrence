#!/usr/bin/env python
# ====================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ====================================================================

"""recurrence-cli:  Recurrence command-line application."""
import sys
import os
try:
  import recurrence_lib
except ImportError: 
  sys.path.insert(0, os.path.join(os.path.dirname(sys.argv[0]), ".."))
  import recurrence_lib
import re
import datetime
try:
  import readline
except ImportError:
  pass
import uuid

_date_re = re.compile('2[0-9]{3}-[0-9]{2}-[0-9]{2}')

class RecurrenceCLISyntaxError(Exception):
  pass


class RecurrenceCLINotImplementedError(Exception):
  def __init__(self):
    Exception.__init__(self, "Not yet implemented")


class RecurrenceCommandLine:

  def __init__(self, datafile):
    self.datafile = datafile
    if os.path.exists(datafile) and os.path.isfile(datafile):
      self.definitions, self.occurrences = \
        recurrence_lib.storage.read_data_file(datafile)
    else:
      self.definitions = []
      self.occurrences = []
    self.has_mods = False

  def run(self):
    while 1:
      try:
        input = raw_input('\nrecurrence%s> ' % (self.has_mods and '*' or ''))
      except EOFError:
        return
      args = input.split(' ')
      if not args:
        continue
      cmd = args.pop(0)
      try:
        func = getattr(self, 'cmd_' + cmd)
        try:
          func(*args)
          if cmd == 'quit':
            return
        except RecurrenceCLISyntaxError, e:
          sys.stdout.write("ERROR: %s\n\n" % (str(e)))
          self.cmd_help(cmd)
        except Exception, e:
          sys.stdout.write("ERROR: %s\n" % (str(e)))
        sys.stdout.write("\n")
      except:
        sys.stdout.write("Unknown command '%s'.  (Use 'help' to see "
                         "commands.)\n" % (cmd))

  def prompt(self, promptstr, validator=None, default=None):
    # Prompt with PROMPTSTR, returning the user's explicit or implicit
    # response.  VALIDATOR is a function which accepts the user's
    # input at the prompt and checks for validity, returning None if
    # the input is invalid, otherwise returning the (possibly
    # normalized) input.  If DEFAULT is not None, and user provides an
    # empty response, return DEFAULT.
    default_str = ''
    if default is not None:
      default_str = ' [%s]' % (default)
    while 1:
      try:
        input = raw_input('\n%s?%s ' % (promptstr, default_str))
        if input == '' and default is not None:
          return default
        if validator is not None:
          input = validator(input)
          if input is None:
            continue
        return input
      except:
        pass

  def parse_datestr(self, datestr):
    return datetime.date(int(datestr[0:4]),
                         int(datestr[5:7]),
                         int(datestr[8:10]))

  def print_occurrence(self, occurrence):
    date = occurrence.get_date()
    desc = occurrence.get_definition().get_description()
    sys.stdout.write("%4d-%02d-%02d | %s\n"
                     % (date.year, date.month, date.day, desc.ljust(60)[:60]))
    
  ###----------------------- CLI COMMANDS -------------------------###

  def cmd_define(self, *args):
    """\
Usage: define

Interactively add a new event definition."""
    if len(args):
      raise RecurrenceCLISyntaxError("Too many arguments")


    description = self.prompt("Description",
                              lambda x: x or None)
    start_date = self.prompt("Start date",
                             lambda x: _date_re.match(x) and x or None)
    start_date = self.parse_datestr(start_date)
    recurs = self.prompt("Recurrence ('n'one, 'w'eekly, 'm'onthly, 'y'early)",
                         lambda x: x in ('n', 'w', 'm', 'y') and x or None)
    if recurs == 'y':
      period = recurrence_lib.events.EVENT_PERIOD_YEARLY
    elif recurs == 'm':
      period = recurrence_lib.events.EVENT_PERIOD_MONTHLY
    elif recurs == 'w':
      period = recurrence_lib.events.EVENT_PERIOD_WEEKLY
    else:
      period = None
    if period:
      end_date = self.prompt("Until date",
                             lambda x: _date_re.match(x) and x or None,
                             'none')
      if end_date == 'none':
        end_date = None
      else:
        end_date = self.parse_datestr(end_date)
      recurrence = recurrence_lib.events.EventRecurrence(period, end_date)
    else:
      recurrence = None
    new_def = recurrence_lib.events.EventDefinition(uuid.uuid4().hex,
                                                    description,
                                                    start_date,
                                                    recurrence)
    self.definitions.append(new_def)
    self.has_mods = True
    
  def cmd_help(self, *args):
    """\
Usage: help [SUBCOMMAND]

Show help on SUBCOMMAND, if provided, or just general help otherwise."""
    func = None
    argc = len(args)
    if argc > 1:
      raise RecurrenceCLISyntaxError("Too many arguments")
    elif argc == 1:
      try: 
        func = getattr(self, 'cmd_' + args[0])
      except:
        sys.stdout.write("ERROR: Unknown command '%s'\n" % (args[0]))
        func = None
    if func:
      sys.stdout.write(func.__doc__)
    else:
      sys.stdout.write("""\
Available subcommands (use 'help SUBCOMMAND' for specific help):

   help     Show help.
   define   Add a new event definition.
   quit     Um... quit?
   save     Save data to a data file.
   show     Show events.
""")

  def cmd_quit(self, *args):
    """\
Usage: quit

Quit the program.  Pretty straightforward, eh?"""
    if len(args):
      raise RecurrenceCLISyntaxError("Too many arguments")
    if self.has_mods:
      if self.prompt("Changes made.  Save ('y', 'n')",
                     lambda x: x in ('y', 'n') and x or None) == 'y':
        self.cmd_save()
    sys.stdout.write('Quitting.\n')

  def cmd_save(self, *args):
    """\
Usage: save [DATAFILE]

Save the current data to DATAFILE, if provided, or to the original
data file used with the program otherwise."""
    datafile = self.datafile 
    if len(args) > 1:
      raise RecurrenceCLISyntaxError("Too many arguments")
    elif len(args) == 1:
      datafile = os.path.normpath(args[0])
    if os.path.exists(datafile):
      if self.prompt("Overwrite '%s' ('y', 'n')" % (datafile),
                     lambda x: x in ('y', 'n') and x or None,
                     'n') == 'n':
        return 
    recurrence_lib.storage.write_data_file(datafile, self.definitions,
                                           self.occurrences)
    sys.stdout.write("Saved.\n")
    if not args:
      self.has_mods = False

  def cmd_show(self, *args):
    """\
Usage: show [NUM_DAYS]

Show uncleared events -- all those in the past plus those NUM_DAYS
(28, by default; 366 maximum) into the future."""
    now = datetime.date.today()
    if len(args) > 1:
      raise RecurrenceCLISyntaxError("Too many arguments")
    if len(args) == 1:
      try:
        num_days = int(args[0])
      except:
        raise RecurrenceCLISyntaxError("Unable to parse number of days")
      if num_days < 1:
        raise RecurrenceCLISyntaxError("Number of days must be a positive "
                                       "integer")
      if num_days > 366:
        raise RecurrenceCLISyntaxError("Number of days must be no more than "
                                         "366")
    else:
      num_days = 28
    def _cmp_date(a, b):
      if a.get_date() < b.get_date():
        return -1
      if a.get_date() > b.get_date():
        return 1
      return cmp(a.get_definition().get_description(),
                 b.get_definition().get_description())
    past_occs = recurrence_lib.events._get_past_occurrences(self.definitions,
                                                            self.occurrences,
                                                            now)
    past_occs.sort(_cmp_date)
    fut_occs = recurrence_lib.events._get_future_occurrences(self.definitions,
                                                             self.occurrences,
                                                             now, num_days)
    fut_occs.sort(_cmp_date)
    for occurrence in past_occs:
      self.print_occurrence(occurrence)
    sys.stdout.write("--------------------------\n")
    for occurrence in fut_occs:
      self.print_occurrence(occurrence)
      

def usage_and_exit(errmsg=None):
  progname = os.path.basename(sys.argv[0])
  stream = errmsg is None and sys.stdout or sys.stderr
  stream.write("""\
%s - cli for the Recurrence recurrent event manager

Usage: %s [OPTIONS] DATAFILE

   Perform operations on the Recurrence data found in DATAFILE.

Options:

   --help (-h):     Show this usage message and exit.
   
""" % (progname, progname))
  if errmsg is not None:
    stream.write("ERROR: %s\n" % (errmsg))
    sys.exit(1)
  sys.exit(0)
    
  
def main():
  argc = len(sys.argv)
  if argc == 1:
    usage_and_exit("Not enough arguments.")
  elif '--help' in sys.argv[1:]:
    usage_and_exit()
  elif argc > 2:
    usage_and_exit("Unexpected number of arguments.")

  datafile = os.path.normpath(sys.argv[1])
  rcli = RecurrenceCommandLine(datafile)
  rcli.run()

if __name__ == "__main__":
  try:
    main()
  except KeyboardInterrupt:
    pass
