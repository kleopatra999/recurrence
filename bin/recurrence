#!/usr/bin/env python
# ====================================================================
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ====================================================================

"""recurrence:  Recurrence wxWidgets-based GUI application."""

import sys
import os
try:
  import recurrence_lib
except ImportError: 
  sys.path.insert(0, os.path.join(os.path.dirname(sys.argv[0]), ".."))
  import recurrence_lib
import wx
import wx.xrc


class TaskBarIcon(wx.TaskBarIcon):
  """Recurrence taskbar icon manager."""

  def __init__(self, popup_menu):
    wx.TaskBarIcon.__init__(self)
    self.alert = False
    self.popup_menu = popup_menu
    self._UpdateIcon()

  def CreatePopupMenu(self):
    """Called when the user invokes the popup menu (that is,
    right-clicks on the taskbar icon)."""
    self.PopupMenu(self.popup_menu)
    
  def _SetAlert(self, alert=True):
    """Ensure that the local alert state is set to ALERT, updating the
    icon if necessary."""
    if bool(alert) != self.alert:
      self.alert = bool(alert)
      self._UpdateIcon()

  def _GetAlert(self):
    """Return the local alert state."""
    return self.alert
      
  def _UpdateIcon(self):
    """Update the icon bitmap based on the current alert state."""
    if self.alert:
      self.SetIcon(wx.Icon("tbicon-alert.xpm", wx.BITMAP_TYPE_XPM))
    else:
      self.SetIcon(wx.Icon("tbicon-normal.xpm", wx.BITMAP_TYPE_XPM))
   
    
class TaskBarTopFrame(wx.Frame):
  """Recurrence primary task-bar frame."""

  def __init__(self, title, resources):
    self.resources = resources
    wx.Frame.__init__(self, None, -1, title, size=(100, 100),
                      style=wx.FRAME_NO_TASKBAR|wx.NO_FULL_REPAINT_ON_RESIZE)

    self.popup = self.resources.LoadMenu('TaskBarPopupMenu')
    wx.EVT_MENU(self.popup,
                self.resources.GetXRCID('TaskBarMenuItemShow'),
                self._TaskBarMenuItemShowSelected)
    wx.EVT_MENU(self.popup,
                self.resources.GetXRCID('TaskBarMenuItemToggle'),
                self._TaskBarMenuItemToggleSelected)
    wx.EVT_MENU(self.popup,
                self.resources.GetXRCID('TaskBarMenuItemExit'),
                self._TaskBarMenuItemExitSelected)
    self.tbicon = TaskBarIcon(self.popup)
    self.Show(False)

  def Close(self):
    """Overrides wx.Frame.Close() to ensure that we remove the icon
    installed by the TaskBarIcon() object."""
    self.tbicon.RemoveIcon()
    wx.Frame.Close(self)

  def _TaskBarMenuItemShowSelected(self, event):
    """Event handler for selection of the TaskBarMenu's 'Show...'
    item.  Displays this frame."""
    self.Show(True)
    return True

  def _TaskBarMenuItemToggleSelected(self, event):
    """Event handler for selection of the TaskBarMenu's 'Toggle...'
    item.  Toggles the icon alertness state."""
    self.tbicon._SetAlert(not self.tbicon._GetAlert())
    return True

  def _TaskBarMenuItemExitSelected(self, event):
    """Event handler for selection of the TaskBarMenu's 'Exit...'
    item.  Closes down this frame."""
    self.Close()
    return True


class RecurrenceApp(wx.App):
  """Recurrence wxApp object."""
  
  def __init__(self):
    wx.App.__init__(self)
    
  def OnInit(self):
    """Called when the application is being initialed."""
    self.resources = wx.xrc.XmlResource('resources.xrc')
    self.frame = TaskBarTopFrame("Recurrence", self.resources)
    self.SetTopWindow(self.frame)
    return True


def main():
  app = RecurrenceApp()
  app.MainLoop()


if __name__ == "__main__":
  main()
